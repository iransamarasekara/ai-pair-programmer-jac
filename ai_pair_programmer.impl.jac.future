"""
Implementation file for AI Pair Programming Tool
"""

include:jac ai_pair_programmer;
import:py datetime;

# ProgrammingAssistant Walker Implementations
impl ProgrammingAssistant {
    can start with `root entry {
        print(f"Starting programming assistance session: {self.session_id}");
        print(f"Request type: {self.request_type}");
        
        # Create session node if it doesn't exist
        session_node = SessionNode(
            session_id=self.session_id,
            created_at=str(datetime.datetime.now()),
            request_history=[]
        );
        
        # Connect session to root
        root ++> session_node;
        
        # Route to appropriate handler based on request type
        if self.request_type == "analyze" {
            analysis_node = CodeAnalysisNode();
            root ++> analysis_node;
            visit analysis_node;
        } elif self.request_type == "generate" {
            generation_node = CodeGenerationNode();
            root ++> generation_node;
            visit generation_node;
        } elif self.request_type == "debug" {
            debug_node = DebuggingNode();
            root ++> debug_node;
            visit debug_node;
        } elif self.request_type == "explain" {
            explanation_node = ExplanationNode();
            root ++> explanation_node;
            visit explanation_node;
        } else {
            print(f"Unknown request type: {self.request_type}");
        }
        
        # Log request to session history
        visit session_node;
    }

    can handle_code_analysis with CodeAnalysisNode entry {
        print(f"\n--- Code Analysis Request ---");
        print(f"Language: {self.language}");
        print(f"Code to analyze:\n{self.code}");
        
        # Get AI analysis
        analysis_result = analyze_code(self.code, self.language);
        
        print(f"\nAI Analysis Result:\n{analysis_result}");
        
        # Update analysis count
        here.analysis_count += 1;
        print(f"Total analyses performed: {here.analysis_count}");
        
        disengage;
    }

    can handle_code_generation with CodeGenerationNode entry {
        print(f"\n--- Code Generation Request ---");
        print(f"Language: {self.language}");
        print(f"Requirements: {self.requirements}");
        
        # Generate code using AI
        generated_code = generate_code(self.requirements, self.language);
        
        print(f"\nGenerated Code:\n{generated_code}");
        
        # Update generation count
        here.generation_count += 1;
        print(f"Total generations performed: {here.generation_count}");
        
        disengage;
    }

    can handle_debugging with DebuggingNode entry {
        print(f"\n--- Debugging Request ---");
        print(f"Language: {self.language}");
        print(f"Code with error:\n{self.code}");
        print(f"Error message: {self.error_message}");
        
        # Get debugging suggestions from AI
        debug_suggestions = debug_code(self.code, self.error_message, self.language);
        
        print(f"\nDebugging Suggestions:\n{debug_suggestions}");
        
        # Update debug count
        here.debug_count += 1;
        print(f"Total debug sessions: {here.debug_count}");
        
        disengage;
    }

    can handle_explanation with ExplanationNode entry {
        print(f"\n--- Code Explanation Request ---");
        print(f"Language: {self.language}");
        print(f"Code to explain:\n{self.code}");
        
        # Get code explanation from AI
        explanation = explain_code(self.code, self.language);
        
        print(f"\nCode Explanation:\n{explanation}");
        
        # Update explanation count
        here.explanation_count += 1;
        print(f"Total explanations provided: {here.explanation_count}");
        
        disengage;
    }
}

# Node Implementations
impl CodeAnalysisNode {
    can process_analysis with ProgrammingAssistant entry {
        print(f"Processing code analysis in node (count: {self.analysis_count})");
        visit here;
    }
}

impl CodeGenerationNode {
    can process_generation with ProgrammingAssistant entry {
        print(f"Processing code generation in node (count: {self.generation_count})");
        visit here;
    }
}

impl DebuggingNode {
    can process_debugging with ProgrammingAssistant entry {
        print(f"Processing debugging in node (count: {self.debug_count})");
        visit here;
    }
}

impl ExplanationNode {
    can process_explanation with ProgrammingAssistant entry {
        print(f"Processing explanation in node (count: {self.explanation_count})");
        visit here;
    }
}

impl SessionNode {
    can manage_session with ProgrammingAssistant entry {
        print(f"Managing session: {self.session_id}");
        
        # Add request to history
        request_info = {
            "type": walker.request_type,
            "timestamp": str(datetime.datetime.now()),
            "language": walker.language
        };
        
        self.request_history.append(request_info);
        
        print(f"Session history length: {len(self.request_history)}");
        
        disengage;
    }
}